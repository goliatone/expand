#!/usr/bin/env node
"use strict";

var updateNotifier = require('update-notifier');
var pkg = require('../package.json');
var extend = require('gextend');

updateNotifier({pkg: pkg}).notify();


require('yargonaut')
  .style('cyan')
  .helpStyle('green.bold')
  .style('yellow', 'required');

var yargs = require('yargs');

var argv = yargs.usage('Usage: $0 <template> [options]')
    .option('c', {
        alias: 'context',
        describe: 'Path to context JSON file',
        type: 'string'
    })
    .option('e', {
        alias: 'engine',
        describe: 'Template engine',
        type: 'string',
        default: 'swig'
    })
    .option('d', {
        alias: 'debug',
        describe: 'Output debug information',
        type: 'boolean'
    })
    .version( function() {
		return 'slv version: ' + require( '../package' ).version;
	})
    .help('h')
    .alias('h', 'help')
    .epilog('MIT License 2015, goliatone')
    .argv;

//This should be a valid tempalte file
var template = argv._[0];

if(!template){
    console.log('ERROR: Template argument not provided. You need to specify a template.\n');
    yargs.showHelp();
    process.exit();
}

var debug = argv.debug ? console.log : function(){};

var context = {};

if(argv.context) {
    try {
        context = require('path').resolve(argv.context);
        debug('trying to load context file: %s', context);
        context = require('fs').readFileSync(context, 'utf-8');
        context = JSON.parse(context);
    } catch(e) {
        debug('Error parsing context file.');
        debug(e);
    }
}

/*
 * Process ENV overrides any variables stored
 * in context json file.
 */
context = extend({}, context, process.env);

require('../lib')({
    engine: argv.engine,
    template: template,
    context: context,
    debug: argv.debug
});
